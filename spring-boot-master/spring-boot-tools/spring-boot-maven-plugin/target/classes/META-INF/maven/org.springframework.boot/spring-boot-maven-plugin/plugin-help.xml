<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.3 on 2014-09-23 -->

<plugin>
  <name>Spring Boot Maven Plugin</name>
  <description>Spring Boot Maven Plugin</description>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-maven-plugin</artifactId>
  <version>1.2.0.BUILD-SNAPSHOT</version>
  <goalPrefix>spring-boot</goalPrefix>
  <mojos>
    <mojo>
      <goal>help</goal>
      <description>Display help information on spring-boot-maven-plugin.
Call mvn spring-boot:help -Ddetail=true -Dgoal=&lt;goal-name&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.springframework.boot.maven.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>repackage</goal>
      <description>Repackages existing JAR and WAR archives so that they can be executed from the command line using java -jar. With layout=NONE can also be used simply to package a JAR with nested dependencies (and no main class, so not executable).</description>
      <requiresDependencyResolution>compile+runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>org.springframework.boot.maven.RepackageMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.1</since>
      <requiresDependencyCollection>compile+runtime</requiresDependencyCollection>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Classifier to add to the artifact generated. If given, the artifact will be attached. If this is not given, it will merely be written to the output directory according to the finalName. Attaching the artifact allows to deploy it alongside to the original one, see the maven documentation for more details.</description>
        </parameter>
        <parameter>
          <name>excludeArtifactIds</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of artifact names to exclude (exact match).</description>
        </parameter>
        <parameter>
          <name>excludeGroupIds</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of groupId names to exclude (exact match).</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Collection of artifact definitions to exclude. The Exclude element defines a groupId and artifactId mandatory properties and an optional classifier property.</description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of the generated archive.</description>
        </parameter>
        <parameter>
          <name>layout</name>
          <type>org.springframework.boot.maven.RepackageMojo$LayoutType</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The type of archive (which corresponds to how the dependencies are laid out inside it). Possible values are JAR, WAR, ZIP, DIR, NONE. Defaults to a guess based on the archive type.</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the main class. If not specified the first compiled class found that contains a &apos;main&apos; method will be used.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Directory containing the generated archive.</description>
        </parameter>
        <parameter>
          <name>requiresUnpack</name>
          <type>java.util.List</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A list of the libraries that must be unpacked from fat jars in order to run.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip the execution.</description>
        </parameter>
      </parameters>
      <configuration>
        <excludeArtifactIds implementation="java.lang.String" default-value="">${excludeArtifactIds}</excludeArtifactIds>
        <excludeGroupIds implementation="java.lang.String" default-value="">${excludeGroupIds}</excludeGroupIds>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <skip implementation="boolean" default-value="false">${skip}</skip>
      </configuration>
    </mojo>
    <mojo>
      <goal>run</goal>
      <description>Run an executable archive application.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>validate</phase>
      <executePhase>test-compile</executePhase>
      <implementation>org.springframework.boot.maven.RunMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.1</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>addResources</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add maven resources to the classpath directly, this allows live in-place editing of resources. Duplicate resources are removed from target/classes to prevent them to appear twice if ClassLoader.getResources() is called.</description>
        </parameter>
        <parameter>
          <name>agent</name>
          <type>java.io.File[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Path to agent jar.</description>
        </parameter>
        <parameter>
          <name>arguments</name>
          <type>java.lang.String[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Arguments that should be passed to the application. On command line use commas to separate multiple arguments.</description>
        </parameter>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Directory containing the classes and resource files that should be packaged into the archive.</description>
        </parameter>
        <parameter>
          <name>excludeArtifactIds</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of artifact names to exclude (exact match).</description>
        </parameter>
        <parameter>
          <name>excludeGroupIds</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Comma separated list of groupId names to exclude (exact match).</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Collection of artifact definitions to exclude. The Exclude element defines a groupId and artifactId mandatory properties and an optional classifier property.</description>
        </parameter>
        <parameter>
          <name>folders</name>
          <type>java.lang.String[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional folders besides the classes directory that should be added to the classpath.</description>
        </parameter>
        <parameter>
          <name>jvmArguments</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>JVM arguments that should be associated with the forked process used to run the application. On command line, make sure to wrap multiple values between quotes.</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the main class. If not specified the first compiled class found that contains a &apos;main&apos; method will be used.</description>
        </parameter>
        <parameter>
          <name>noverify</name>
          <type>java.lang.Boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to say that the agent requires -noverify.</description>
        </parameter>
      </parameters>
      <configuration>
        <addResources implementation="boolean" default-value="true">${run.addResources}</addResources>
        <agent implementation="java.io.File[]">${run.agent}</agent>
        <arguments implementation="java.lang.String[]">${run.arguments}</arguments>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <excludeArtifactIds implementation="java.lang.String" default-value="">${excludeArtifactIds}</excludeArtifactIds>
        <excludeGroupIds implementation="java.lang.String" default-value="">${excludeGroupIds}</excludeGroupIds>
        <jvmArguments implementation="java.lang.String">${run.jvmArguments}</jvmArguments>
        <noverify implementation="java.lang.Boolean">${run.noverify}</noverify>
      </configuration>
    </mojo>
  </mojos>
</plugin>