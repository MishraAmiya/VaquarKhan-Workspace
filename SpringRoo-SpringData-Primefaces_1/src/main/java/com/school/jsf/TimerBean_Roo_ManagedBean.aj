// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.school.jsf;

import com.school.domain.Timer;
import com.school.jsf.TimerBean;
import com.school.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect TimerBean_Roo_ManagedBean {
    
    declare @type: TimerBean: @ManagedBean(name = "timerBean");
    
    declare @type: TimerBean: @SessionScoped;
    
    private String TimerBean.name = "Timers";
    
    private Timer TimerBean.timer;
    
    private List<Timer> TimerBean.allTimers;
    
    private boolean TimerBean.dataVisible = false;
    
    private List<String> TimerBean.columns;
    
    private HtmlPanelGrid TimerBean.createPanelGrid;
    
    private HtmlPanelGrid TimerBean.editPanelGrid;
    
    private HtmlPanelGrid TimerBean.viewPanelGrid;
    
    private boolean TimerBean.createDialogVisible = false;
    
    @PostConstruct
    public void TimerBean.init() {
        columns = new ArrayList<String>();
        columns.add("message");
    }
    
    public String TimerBean.getName() {
        return name;
    }
    
    public List<String> TimerBean.getColumns() {
        return columns;
    }
    
    public List<Timer> TimerBean.getAllTimers() {
        return allTimers;
    }
    
    public void TimerBean.setAllTimers(List<Timer> allTimers) {
        this.allTimers = allTimers;
    }
    
    public String TimerBean.findAllTimers() {
        allTimers = Timer.findAllTimers();
        dataVisible = !allTimers.isEmpty();
        return null;
    }
    
    public boolean TimerBean.isDataVisible() {
        return dataVisible;
    }
    
    public void TimerBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid TimerBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void TimerBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid TimerBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void TimerBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid TimerBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void TimerBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid TimerBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel messageCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        messageCreateOutput.setFor("messageCreateInput");
        messageCreateOutput.setId("messageCreateOutput");
        messageCreateOutput.setValue("Message:");
        htmlPanelGrid.getChildren().add(messageCreateOutput);
        
        InputText messageCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        messageCreateInput.setId("messageCreateInput");
        messageCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{timerBean.timer.message}", String.class));
        messageCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(messageCreateInput);
        
        Message messageCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messageCreateInputMessage.setId("messageCreateInputMessage");
        messageCreateInputMessage.setFor("messageCreateInput");
        messageCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messageCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TimerBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel messageEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        messageEditOutput.setFor("messageEditInput");
        messageEditOutput.setId("messageEditOutput");
        messageEditOutput.setValue("Message:");
        htmlPanelGrid.getChildren().add(messageEditOutput);
        
        InputText messageEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        messageEditInput.setId("messageEditInput");
        messageEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{timerBean.timer.message}", String.class));
        messageEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(messageEditInput);
        
        Message messageEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        messageEditInputMessage.setId("messageEditInputMessage");
        messageEditInputMessage.setFor("messageEditInput");
        messageEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(messageEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TimerBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText messageLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messageLabel.setId("messageLabel");
        messageLabel.setValue("Message:");
        htmlPanelGrid.getChildren().add(messageLabel);
        
        HtmlOutputText messageValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        messageValue.setId("messageValue");
        messageValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{timerBean.timer.message}", String.class));
        htmlPanelGrid.getChildren().add(messageValue);
        
        return htmlPanelGrid;
    }
    
    public Timer TimerBean.getTimer() {
        if (timer == null) {
            timer = new Timer();
        }
        return timer;
    }
    
    public void TimerBean.setTimer(Timer timer) {
        this.timer = timer;
    }
    
    public String TimerBean.onEdit() {
        return null;
    }
    
    public boolean TimerBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void TimerBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String TimerBean.displayList() {
        createDialogVisible = false;
        findAllTimers();
        return "timer";
    }
    
    public String TimerBean.displayCreateDialog() {
        timer = new Timer();
        createDialogVisible = true;
        return "timer";
    }
    
    public String TimerBean.persist() {
        String message = "";
        if (timer.getId() != null) {
            timer.merge();
            message = "message_successfully_updated";
        } else {
            timer.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Timer");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTimers();
    }
    
    public String TimerBean.delete() {
        timer.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Timer");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTimers();
    }
    
    public void TimerBean.reset() {
        timer = null;
        createDialogVisible = false;
    }
    
    public void TimerBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
